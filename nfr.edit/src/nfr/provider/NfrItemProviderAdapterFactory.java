/**
 */
package nfr.provider;

import java.util.ArrayList;
import java.util.Collection;

import nfr.util.NfrAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NfrItemProviderAdapterFactory extends NfrAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NfrItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.NFRFramework} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFRFrameworkItemProvider nfrFrameworkItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.NFRFramework}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFRFrameworkAdapter() {
		if (nfrFrameworkItemProvider == null) {
			nfrFrameworkItemProvider = new NFRFrameworkItemProvider(this);
		}

		return nfrFrameworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.NFRSoftgoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFRSoftgoalItemProvider nfrSoftgoalItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.NFRSoftgoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFRSoftgoalAdapter() {
		if (nfrSoftgoalItemProvider == null) {
			nfrSoftgoalItemProvider = new NFRSoftgoalItemProvider(this);
		}

		return nfrSoftgoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.OperationalizingSoftgoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationalizingSoftgoalItemProvider operationalizingSoftgoalItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.OperationalizingSoftgoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationalizingSoftgoalAdapter() {
		if (operationalizingSoftgoalItemProvider == null) {
			operationalizingSoftgoalItemProvider = new OperationalizingSoftgoalItemProvider(this);
		}

		return operationalizingSoftgoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.ClaimSoftgoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClaimSoftgoalItemProvider claimSoftgoalItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.ClaimSoftgoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClaimSoftgoalAdapter() {
		if (claimSoftgoalItemProvider == null) {
			claimSoftgoalItemProvider = new ClaimSoftgoalItemProvider(this);
		}

		return claimSoftgoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.ANDDecomposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDDecompositionItemProvider andDecompositionItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.ANDDecomposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createANDDecompositionAdapter() {
		if (andDecompositionItemProvider == null) {
			andDecompositionItemProvider = new ANDDecompositionItemProvider(this);
		}

		return andDecompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.ORDecomposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORDecompositionItemProvider orDecompositionItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.ORDecomposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORDecompositionAdapter() {
		if (orDecompositionItemProvider == null) {
			orDecompositionItemProvider = new ORDecompositionItemProvider(this);
		}

		return orDecompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.EQLDecomposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EQLDecompositionItemProvider eqlDecompositionItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.EQLDecomposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEQLDecompositionAdapter() {
		if (eqlDecompositionItemProvider == null) {
			eqlDecompositionItemProvider = new EQLDecompositionItemProvider(this);
		}

		return eqlDecompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.Make} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MakeItemProvider makeItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.Make}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMakeAdapter() {
		if (makeItemProvider == null) {
			makeItemProvider = new MakeItemProvider(this);
		}

		return makeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.Help} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HelpItemProvider helpItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.Help}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHelpAdapter() {
		if (helpItemProvider == null) {
			helpItemProvider = new HelpItemProvider(this);
		}

		return helpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.SomePlus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SomePlusItemProvider somePlusItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.SomePlus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSomePlusAdapter() {
		if (somePlusItemProvider == null) {
			somePlusItemProvider = new SomePlusItemProvider(this);
		}

		return somePlusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.Break} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BreakItemProvider breakItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.Break}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBreakAdapter() {
		if (breakItemProvider == null) {
			breakItemProvider = new BreakItemProvider(this);
		}

		return breakItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.Hurt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HurtItemProvider hurtItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.Hurt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHurtAdapter() {
		if (hurtItemProvider == null) {
			hurtItemProvider = new HurtItemProvider(this);
		}

		return hurtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.SomeMinus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SomeMinusItemProvider someMinusItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.SomeMinus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSomeMinusAdapter() {
		if (someMinusItemProvider == null) {
			someMinusItemProvider = new SomeMinusItemProvider(this);
		}

		return someMinusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nfr.FlowSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowSequenceItemProvider flowSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link nfr.FlowSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowSequenceAdapter() {
		if (flowSequenceItemProvider == null) {
			flowSequenceItemProvider = new FlowSequenceItemProvider(this);
		}

		return flowSequenceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (nfrFrameworkItemProvider != null) nfrFrameworkItemProvider.dispose();
		if (nfrSoftgoalItemProvider != null) nfrSoftgoalItemProvider.dispose();
		if (operationalizingSoftgoalItemProvider != null) operationalizingSoftgoalItemProvider.dispose();
		if (claimSoftgoalItemProvider != null) claimSoftgoalItemProvider.dispose();
		if (andDecompositionItemProvider != null) andDecompositionItemProvider.dispose();
		if (orDecompositionItemProvider != null) orDecompositionItemProvider.dispose();
		if (eqlDecompositionItemProvider != null) eqlDecompositionItemProvider.dispose();
		if (makeItemProvider != null) makeItemProvider.dispose();
		if (helpItemProvider != null) helpItemProvider.dispose();
		if (somePlusItemProvider != null) somePlusItemProvider.dispose();
		if (breakItemProvider != null) breakItemProvider.dispose();
		if (hurtItemProvider != null) hurtItemProvider.dispose();
		if (someMinusItemProvider != null) someMinusItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (flowSequenceItemProvider != null) flowSequenceItemProvider.dispose();
	}

}
